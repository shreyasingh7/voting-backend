"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const lodash_1 = require("lodash");
const adminCore_module_1 = require("../../adminCore.module");
const adminSite_1 = require("../../adminSite");
const testTypeOrmModule_1 = require("./testTypeOrmModule");
const testAuth_module_1 = require("./testAuth.module");
const tokens_1 = require("../../tokens");
const user_entity_1 = require("../../../exampleApp/src/user/user.entity");
const group_entity_1 = require("../../../exampleApp/src/user/group.entity");
const agency_entity_1 = require("../../../exampleApp/src/user/agency.entity");
function createRegistrationModule(registrables, adminModules) {
    let AdminRegistrationModule = class AdminRegistrationModule {
        constructor(adminSite) {
            this.adminSite = adminSite;
            registrables.forEach(registrable => {
                adminSite.register('test', registrable);
            });
        }
    };
    AdminRegistrationModule = __decorate([
        common_1.Module({ imports: [...adminModules] }),
        __param(0, common_1.Inject(tokens_1.injectionTokens.ADMIN_SITE)),
        __metadata("design:paramtypes", [adminSite_1.default])
    ], AdminRegistrationModule);
    return AdminRegistrationModule;
}
const defaultTestingOptions = {
    adminModule: null,
    adminAuthModule: testAuth_module_1.TestAuthModule,
    adminCoreModule: adminCore_module_1.AdminCoreModuleFactory.createAdminCoreModule({}),
    registerEntities: [],
    imports: [],
};
function createTestingModule(testingOptions = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = lodash_1.merge({}, defaultTestingOptions, testingOptions);
        const adminModules = options.adminModule
            ? [options.adminModule]
            : [options.adminAuthModule, options.adminCoreModule];
        const testingModuleBuilder = yield testing_1.Test.createTestingModule({
            imports: [
                testTypeOrmModule_1.TestTypeOrmModule.forRoot(),
                typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, group_entity_1.Group, agency_entity_1.Agency]),
                ...adminModules,
                ...options.imports,
                createRegistrationModule(options.registerEntities, adminModules),
            ],
        })
            .overrideProvider(typeorm_1.getEntityManagerToken())
            .useFactory({
            factory: (connection) => {
                const queryRunner = connection.createQueryRunner();
                const entityManager = connection.createEntityManager(queryRunner);
                return entityManager;
            },
            inject: [typeorm_1.getConnectionToken()],
        });
        return testingModuleBuilder;
    });
}
exports.createTestingModule = createTestingModule;
function createTestApp(testingModuleBuilder) {
    return __awaiter(this, void 0, void 0, function* () {
        const testingModule = yield testingModuleBuilder.compile();
        const app = testingModule.createNestApplication();
        app.startTest = () => startTest(app);
        app.stopTest = () => stopTest(app);
        app.doClose = app.close;
        app.close = () => closeApp(app);
        return app;
    });
}
exports.createTestApp = createTestApp;
function createAndStartTestApp(testingOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const testingModule = yield createTestingModule(testingOptions);
        const app = yield createTestApp(testingModule);
        yield app.init();
        return app;
    });
}
exports.createAndStartTestApp = createAndStartTestApp;
function startTest(app) {
    return __awaiter(this, void 0, void 0, function* () {
        if (app.testStarted) {
            throw new Error('You called startTest() twice successively on the same app. Did you forget to call stopTest()?');
        }
        yield app.get(typeorm_1.getEntityManagerToken()).queryRunner.startTransaction();
        app.testStarted = true;
    });
}
exports.startTest = startTest;
function stopTest(app) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!app.testStarted) {
            throw new Error('You called stopTest() on an app without having started a test. Did you forget to call startTest()?');
        }
        yield app.get(typeorm_1.getEntityManagerToken()).queryRunner.rollbackTransaction();
        app.testStarted = false;
    });
}
exports.stopTest = stopTest;
function closeApp(app) {
    return __awaiter(this, void 0, void 0, function* () {
        if (app.testStarted) {
            throw new Error('You called app.close() on an app that was running a test. Did you forget to call stopTest()?');
        }
        app.doClose();
    });
}
//# sourceMappingURL=testApp.js.map