import { Binary } from './Binary';
export interface FileRequestPayload {
    id: number;
    offset: number;
}
export declare class SocketWrapper implements SocketLike {
    private events;
    private socket;
    constructor(socket: any);
    send(data: any, cb?: (err: Error) => void): void;
    readonly readyState: number;
    close(code?: number, data?: any): void;
    getSocket(): any;
    on(event: 'message', cb: (data: any, flags: {
        binary: boolean;
    }) => void): this;
    once(event: 'message', cb: (data: any, flags: {
        binary: boolean;
    }) => void): this;
    removeListener(event: 'message', cb: (data: any, flags: {
        binary: boolean;
    }) => void): this;
    removeEventListener(event: 'message', cb: (data: any, flags: {
        binary: boolean;
    }) => void): this;
    private onMessage(message);
}
export interface SocketLike {
    send: (data: any, cb?: (err: Error) => void) => void;
    on: Function;
    once: Function;
    removeListener: Function;
}
export declare function repeatPromise(promise: () => Promise<boolean>): any;
export declare function extractIncomingFiles(opId: number, socket: any, obj?: {
    [key: string]: any;
}): Binary[];
export declare function extractOutgoingFiles(obj?: {
    [key: string]: any;
}): Binary[];
export declare function parseMessage(buffer: ArrayBuffer): {
    payload: any;
    id: number;
    type: number;
};
export declare function buildMessage(id: number, type: number, payload: any): ArrayBuffer;
