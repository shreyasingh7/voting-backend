"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
exports.Writable = stream_1.Writable;
const class_autobind_1 = require("class-autobind");
const message_type_1 = require("./message-type");
class BinarySender extends stream_1.Writable {
    constructor(opts, streamOpts) {
        super(streamOpts);
        class_autobind_1.default(this);
        let bufSize;
        if (streamOpts && streamOpts.highWaterMark) {
            bufSize = streamOpts.highWaterMark;
        }
        else {
            bufSize = 200 * 1024;
        }
        this.buf = new Buffer(BinarySender.HEADER_SIZE + bufSize);
        this.bufOffset = BinarySender.HEADER_SIZE;
        this.seq = 0;
        this.socket = opts.socket;
        this.fileId = opts.fileId;
        this.opId = opts.opId;
        this.buf.writeUInt32LE(this.opId, 0);
        this.buf.writeUInt32LE(message_type_1.MessageType.GQL_BINARY, 4);
        this.buf.writeUInt32LE(this.fileId, 8);
    }
    _write(chunk, encoding, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            let chunkOffset = 0;
            while (chunkOffset < chunk.length) {
                const len = Math.min(this.buf.length - this.bufOffset, chunk.length - chunkOffset);
                const written = chunk.copy(this.buf, this.bufOffset, chunkOffset, chunkOffset + len);
                chunkOffset += written;
                this.bufOffset += written;
                if (this.bufOffset === this.buf.length) {
                    try {
                        yield this.sendData();
                        this.bufOffset = BinarySender.HEADER_SIZE;
                    }
                    catch (err) {
                        callback(err);
                        return;
                    }
                }
            }
            callback();
        });
    }
    _final(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const sent = yield this.sendData();
                if (sent > 0) {
                    this.bufOffset = BinarySender.HEADER_SIZE;
                    yield this.sendData();
                }
            }
            catch (err) {
                callback(err);
                return;
            }
            callback();
        });
    }
    waitAck() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                const onMessage = (data) => {
                    const message = Buffer.from(data);
                    let id, fileId, seq;
                    id = message.readUInt32LE(0);
                    const type = message.readUInt32LE(4);
                    if (type === message_type_1.MessageType.GQL_BINARY_ACK) {
                        fileId = message.readUInt32LE(8);
                        seq = message.readUInt32LE(12);
                    }
                    if (id === this.opId && fileId === this.fileId && seq === this.seq) {
                        this.socket.removeListener('message', onMessage);
                        resolve();
                    }
                };
                this.socket.on('message', onMessage);
            });
        });
    }
    sendData() {
        return __awaiter(this, void 0, void 0, function* () {
            this.seq++;
            this.buf.writeUInt32LE(this.seq, 12);
            let buf = this.buf.buffer;
            if (this.bufOffset < this.buf.length) {
                buf = this.buf.buffer.slice(0, this.bufOffset);
            }
            const ack = this.waitAck();
            yield new Promise((resolve, reject) => this.socket.send(buf, (err) => err ? reject(err) : resolve()));
            yield ack;
            return buf.byteLength;
        });
    }
}
BinarySender.HEADER_SIZE = 16;
exports.BinarySender = BinarySender;
//# sourceMappingURL=BinarySender.js.map