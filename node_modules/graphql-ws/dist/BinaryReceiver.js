"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
exports.Readable = stream_1.Readable;
const class_autobind_1 = require("class-autobind");
const message_type_1 = require("./message-type");
const events_1 = require("events");
class BinaryReceiver extends stream_1.Readable {
    constructor(opts, streamOpts) {
        super(streamOpts);
        class_autobind_1.default(this);
        this.socket = opts.socket;
        this.fileId = opts.fileId;
        this.opId = opts.opId;
        this.offset = opts.offset;
        this.events = new events_1.EventEmitter();
        this.ack = new Buffer(BinaryReceiver.HEADER_SIZE);
        this.ack.writeUInt32LE(this.opId, 0);
        this.ack.writeUInt32LE(message_type_1.MessageType.GQL_BINARY_ACK, 4);
        this.ack.writeUInt32LE(this.fileId, 8);
        this.startReceiving();
    }
    _read(size) {
        return __awaiter(this, void 0, void 0, function* () {
            process.nextTick(() => this.events.emit('read', size));
        });
    }
    startReceiving() {
        const req = new Buffer(BinaryReceiver.HEADER_SIZE);
        req.writeUInt32LE(this.opId, 0);
        req.writeUInt32LE(message_type_1.MessageType.GQL_BINARY_REQUEST, 4);
        req.writeUInt32LE(this.fileId, 8);
        req.writeUInt32LE(this.offset, 12);
        this.socket.send(req.buffer, (err) => {
            if (err) {
                process.nextTick(() => this.emit('error', err));
            }
            else {
                this.socket.on('message', this.onMessage);
            }
        });
    }
    stopReceiving() {
        this.socket.removeListener('message', this.onMessage);
    }
    onMessage(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const buf = Buffer.from(data);
            let id, fileId, seq;
            id = buf.readUInt32LE(0);
            const type = buf.readUInt32LE(4);
            if (type === message_type_1.MessageType.GQL_BINARY) {
                fileId = buf.readUInt32LE(8);
                seq = buf.readUInt32LE(12);
            }
            if (id !== this.opId || fileId !== this.fileId) {
                return;
            }
            const payload = buf.slice(BinaryReceiver.HEADER_SIZE, buf.length);
            if (!payload.length) {
                this.stopReceiving();
                this.push(null);
            }
            else {
                if (!this.push(Buffer.from(payload))) {
                    const read = new Promise(resolve => this.events.once('read', resolve));
                    yield read;
                }
            }
            try {
                yield this.sendAck(seq);
            }
            catch (err) {
                this.stopReceiving();
                process.nextTick(() => this.emit('error', err));
            }
        });
    }
    sendAck(seq) {
        return __awaiter(this, void 0, void 0, function* () {
            this.ack.writeUInt32LE(seq, 12);
            return new Promise((resolve, reject) => this.socket.send(this.ack.buffer, (err) => err ? reject(err) : resolve()));
        });
    }
}
BinaryReceiver.HEADER_SIZE = 16;
exports.BinaryReceiver = BinaryReceiver;
//# sourceMappingURL=BinaryReceiver.js.map